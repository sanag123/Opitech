{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { merge, of as observableOf } from 'rxjs';\nimport { catchError, map, startWith, switchMap } from 'rxjs/operators';\nconst ELEMENT_DATA = [{\n  \"userId\": 1,\n  \"id\": 1,\n  \"title\": \"delectus aut autem\",\n  \"completed\": false\n}];\n/**\n * @title Adding and removing data when using an array-based datasource.\n */\n// export class AppComponents {\n//   displayedColumns: string[] = ['userId', 'id', 'title', 'completed'];\n//   dataSource = [...ELEMENT_DATA];\n//   @ViewChild(MatTable) table!: MatTable<PeriodicElement>;\n//   async elementData() {\n//     const { data } = await axios.get('https://jsonplaceholder.typicode.com/todos');\n//     data.forEach((e: PeriodicElement) => {\n//       this.dataSource.push(e);\n//     });\n//     this.table.renderRows();\n//   }\n//   // applyFilter(event: Event) {\n//   //   const filterValue = (event.target as HTMLInputElement).value;\n//   //   this.table.filter = filterValue.trim().toLowerCase();\n//   // }\n// }\n\nlet AppComponent = class AppComponent {\n  constructor(_httpClient) {\n    this._httpClient = _httpClient;\n    this.displayedColumns = ['created', 'state', 'number', 'title'];\n    this.data = [];\n    this.resultsLength = 0;\n    this.isLoadingResults = true;\n    this.isRateLimitReached = false;\n  }\n\n  ngAfterViewInit() {\n    this.exampleDatabase = new ExampleHttpDatabase(this._httpClient); // If the user changes the sort order, reset back to the first page.\n\n    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\n    merge(this.sort.sortChange, this.paginator.page).pipe(startWith({}), switchMap(() => {\n      this.isLoadingResults = true;\n      return this.exampleDatabase.getRepoIssues(this.sort.active, this.sort.direction, this.paginator.pageIndex).pipe(catchError(() => observableOf(null)));\n    }), map(data => {\n      // Flip flag to show that loading has finished.\n      this.isLoadingResults = false;\n      this.isRateLimitReached = data === null;\n\n      if (data === null) {\n        return [];\n      } // Only refresh the result length if there is new data. In case of rate\n      // limit errors, we do not want to reset the paginator to zero, as that\n      // would prevent users from re-triggering requests.\n\n\n      this.resultsLength = data.total_count;\n      return data.items;\n    })).subscribe(data => this.data = data);\n  }\n\n};\n\n__decorate([ViewChild(MatPaginator)], AppComponent.prototype, \"paginator\", void 0);\n\n__decorate([ViewChild(MatSort)], AppComponent.prototype, \"sort\", void 0);\n\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);\nexport { AppComponent };\n/** An example database that the data source uses to retrieve data for the table. */\n\nexport class ExampleHttpDatabase {\n  constructor(_httpClient) {\n    this._httpClient = _httpClient;\n  }\n\n  getRepoIssues(sort, order, page) {\n    const href = 'https://api.github.com/search/issues';\n    const requestUrl = `${href}?q=repo:angular/components&sort=${sort}&order=${order}&page=${page + 1}`;\n    return this._httpClient.get(requestUrl);\n  }\n\n}","map":{"version":3,"mappings":";AAAA,SAAuBA,SAAvB,EAAkCC,SAAlC,QAAkD,eAAlD;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SAASC,OAAT,QAAuC,wBAAvC;AAIA,SAAQC,KAAR,EAA2BC,EAAE,IAAIC,YAAjC,QAAoD,MAApD;AACA,SAAQC,UAAR,EAAoBC,GAApB,EAAyBC,SAAzB,EAAoCC,SAApC,QAAoD,gBAApD;AAWA,MAAMC,YAAY,GAAsB,CACtC;EACE,UAAU,CADZ;EAEE,MAAM,CAFR;EAGE,SAAS,oBAHX;EAIE,aAAa;AAJf,CADsC,CAAxC;AASA;;;AAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAOA,IAAaC,YAAY,GAAzB,MAAaA,YAAb,CAAyB;EAYvBC,YAAoBC,WAApB,EAA2C;IAAvB;IAXpB,wBAA6B,CAAC,SAAD,EAAY,OAAZ,EAAqB,QAArB,EAA+B,OAA/B,CAA7B;IAEA,YAAsB,EAAtB;IAEA,qBAAgB,CAAhB;IACA,wBAAmB,IAAnB;IACA,0BAAqB,KAArB;EAK+C;;EAE/CC,eAAe;IACb,KAAKC,eAAL,GAAuB,IAAIC,mBAAJ,CAAwB,KAAKH,WAA7B,CAAvB,CADa,CAGb;;IACA,KAAKI,IAAL,CAAUC,UAAV,CAAqBC,SAArB,CAA+B,MAAO,KAAKC,SAAL,CAAeC,SAAf,GAA2B,CAAjE;IAEAlB,KAAK,CAAC,KAAKc,IAAL,CAAUC,UAAX,EAAuB,KAAKE,SAAL,CAAeE,IAAtC,CAAL,CACGC,IADH,CAEIf,SAAS,CAAC,EAAD,CAFb,EAGIC,SAAS,CAAC,MAAK;MACb,KAAKe,gBAAL,GAAwB,IAAxB;MACA,OAAO,KAAKT,eAAL,CAAsBU,aAAtB,CACL,KAAKR,IAAL,CAAUS,MADL,EAEL,KAAKT,IAAL,CAAUU,SAFL,EAGL,KAAKP,SAAL,CAAeC,SAHV,EAILE,IAJK,CAIAjB,UAAU,CAAC,MAAMD,YAAY,CAAC,IAAD,CAAnB,CAJV,CAAP;IAKD,CAPQ,CAHb,EAWIE,GAAG,CAACqB,IAAI,IAAG;MACT;MACA,KAAKJ,gBAAL,GAAwB,KAAxB;MACA,KAAKK,kBAAL,GAA0BD,IAAI,KAAK,IAAnC;;MAEA,IAAIA,IAAI,KAAK,IAAb,EAAmB;QACjB,OAAO,EAAP;MACD,CAPQ,CAST;MACA;MACA;;;MACA,KAAKE,aAAL,GAAqBF,IAAI,CAACG,WAA1B;MACA,OAAOH,IAAI,CAACI,KAAZ;IACD,CAdE,CAXP,EA2BGb,SA3BH,CA2BaS,IAAI,IAAK,KAAKA,IAAL,GAAYA,IA3BlC;EA4BD;;AAhDsB,CAAzB;;AAS2BK,YAAxBjC,SAAS,CAACC,YAAD,CAAe;;AACLgC,YAAnBjC,SAAS,CAACE,OAAD,CAAU;;AAVTS,YAAY,eALxBZ,SAAS,CAAC;EACTmC,QAAQ,EAAE,UADD;EAETC,WAAW,EAAE,sBAFJ;EAGTC,SAAS,EAAE,CAAC,qBAAD;AAHF,CAAD,CAKe,GAAZzB,YAAY,CAAZ;SAAAA;AA+Db;;AACA,OAAM,MAAOK,mBAAP,CAA0B;EAC9BJ,YAAoBC,WAApB,EAA2C;IAAvB;EAA2B;;EAE/CY,aAAa,CAACR,IAAD,EAAeoB,KAAf,EAAqCf,IAArC,EAAiD;IAC5D,MAAMgB,IAAI,GAAG,sCAAb;IACA,MAAMC,UAAU,GAAG,GAAGD,IAAI,mCAAmCrB,IAAI,UAAUoB,KAAK,SAC9Ef,IAAI,GAAG,CACT,EAFA;IAIA,OAAO,KAAKT,WAAL,CAAiB2B,GAAjB,CAAgCD,UAAhC,CAAP;EACD;;AAV6B","names":["Component","ViewChild","MatPaginator","MatSort","merge","of","observableOf","catchError","map","startWith","switchMap","ELEMENT_DATA","AppComponent","constructor","_httpClient","ngAfterViewInit","exampleDatabase","ExampleHttpDatabase","sort","sortChange","subscribe","paginator","pageIndex","page","pipe","isLoadingResults","getRepoIssues","active","direction","data","isRateLimitReached","resultsLength","total_count","items","__decorate","selector","templateUrl","styleUrls","order","href","requestUrl","get"],"sourceRoot":"","sources":["/Users/henry.acuna/StudioProjects/opitech/prueba/src/app/app.component.ts"],"sourcesContent":["import {AfterViewInit, Component, ViewChild} from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort, SortDirection } from '@angular/material/sort';\nimport { MatTable, MatTableDataSource} from '@angular/material/table';\nimport axios from 'axios';\nimport {HttpClient} from '@angular/common/http';\nimport {merge, Observable, of as observableOf} from 'rxjs';\nimport {catchError, map, startWith, switchMap} from 'rxjs/operators';\n\nexport interface PeriodicElement {\n  userId: number;\n  id: number;\n  title: string\n  completed: boolean;\n}\n\n\n\nconst ELEMENT_DATA: PeriodicElement[] = [\n  {\n    \"userId\": 1,\n    \"id\": 1,\n    \"title\": \"delectus aut autem\",\n    \"completed\": false\n  }\n];\n\n/**\n * @title Adding and removing data when using an array-based datasource.\n */\n\n// export class AppComponents {\n//   displayedColumns: string[] = ['userId', 'id', 'title', 'completed'];\n//   dataSource = [...ELEMENT_DATA];\n\n//   @ViewChild(MatTable) table!: MatTable<PeriodicElement>;\n  \n//   async elementData() {\n//     const { data } = await axios.get('https://jsonplaceholder.typicode.com/todos');\n//     data.forEach((e: PeriodicElement) => {\n//       this.dataSource.push(e);\n//     });\n//     this.table.renderRows();\n//   }\n\n//   // applyFilter(event: Event) {\n//   //   const filterValue = (event.target as HTMLInputElement).value;\n//   //   this.table.filter = filterValue.trim().toLowerCase();\n//   // }\n// }\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements AfterViewInit {\n  displayedColumns: string[] = ['created', 'state', 'number', 'title'];\n  exampleDatabase!: ExampleHttpDatabase | null;\n  data: GithubIssue[] = [];\n\n  resultsLength = 0;\n  isLoadingResults = true;\n  isRateLimitReached = false;\n\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  constructor(private _httpClient: HttpClient) {}\n\n  ngAfterViewInit() {\n    this.exampleDatabase = new ExampleHttpDatabase(this._httpClient);\n\n    // If the user changes the sort order, reset back to the first page.\n    this.sort.sortChange.subscribe(() => (this.paginator.pageIndex = 0));\n\n    merge(this.sort.sortChange, this.paginator.page)\n      .pipe(\n        startWith({}),\n        switchMap(() => {\n          this.isLoadingResults = true;\n          return this.exampleDatabase!.getRepoIssues(\n            this.sort.active,\n            this.sort.direction,\n            this.paginator.pageIndex,\n          ).pipe(catchError(() => observableOf(null)));\n        }),\n        map(data => {\n          // Flip flag to show that loading has finished.\n          this.isLoadingResults = false;\n          this.isRateLimitReached = data === null;\n\n          if (data === null) {\n            return [];\n          }\n\n          // Only refresh the result length if there is new data. In case of rate\n          // limit errors, we do not want to reset the paginator to zero, as that\n          // would prevent users from re-triggering requests.\n          this.resultsLength = data.total_count;\n          return data.items;\n        }),\n      )\n      .subscribe(data => (this.data = data));\n  }\n}\n\nexport interface GithubApi {\n  items: GithubIssue[];\n  total_count: number;\n}\n\nexport interface GithubIssue {\n  created_at: string;\n  number: string;\n  state: string;\n  title: string;\n}\n\n/** An example database that the data source uses to retrieve data for the table. */\nexport class ExampleHttpDatabase {\n  constructor(private _httpClient: HttpClient) {}\n\n  getRepoIssues(sort: string, order: SortDirection, page: number): Observable<GithubApi> {\n    const href = 'https://api.github.com/search/issues';\n    const requestUrl = `${href}?q=repo:angular/components&sort=${sort}&order=${order}&page=${\n      page + 1\n    }`;\n\n    return this._httpClient.get<GithubApi>(requestUrl);\n  }\n}"]},"metadata":{},"sourceType":"module"}