{"ast":null,"code":"import _asyncToGenerator from \"/Users/henry.acuna/StudioProjects/opitech/prueba/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { ViewChild } from '@angular/core';\nimport { MatTable } from '@angular/material/table';\nimport axios from 'axios';\nimport * as i0 from \"@angular/core\";\n\nfunction AppComponents_th_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 14);\n    i0.ɵɵtext(1, \" User \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AppComponents_td_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r12 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r12.userId, \" \");\n  }\n}\n\nfunction AppComponents_th_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 14);\n    i0.ɵɵtext(1, \" Subject \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AppComponents_td_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r13 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r13.id, \" \");\n  }\n}\n\nfunction AppComponents_th_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 14);\n    i0.ɵɵtext(1, \" Customer \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AppComponents_td_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r14 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r14.title, \" \");\n  }\n}\n\nfunction AppComponents_th_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 14);\n    i0.ɵɵtext(1, \" Priority \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AppComponents_td_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r15 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r15.completed, \" \");\n  }\n}\n\nfunction AppComponents_tr_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 16);\n  }\n}\n\nfunction AppComponents_tr_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 17);\n  }\n}\n\nfunction AppComponents_tr_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 18)(1, \"td\", 19);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n\n    const _r0 = i0.ɵɵreference(4);\n\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"No data matching the filter \\\"\", _r0.value, \"\\\"\");\n  }\n}\n\nconst ELEMENT_DATA = [{\n  \"userId\": 1,\n  \"id\": 1,\n  \"title\": \"delectus aut autem\",\n  \"completed\": false\n}];\n/**\n * @title Adding and removing data when using an array-based datasource.\n */\n\nexport class AppComponents {\n  constructor() {\n    this.displayedColumns = ['userId', 'id', 'title', 'completed'];\n    this.dataSource = [...ELEMENT_DATA];\n  }\n\n  elementData() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        data\n      } = yield axios.get('https://jsonplaceholder.typicode.com/todos');\n      data.forEach(e => {\n        _this.dataSource.push(e);\n      });\n\n      _this.table.renderRows();\n    })();\n  }\n\n}\n\nAppComponents.ɵfac = function AppComponents_Factory(t) {\n  return new (t || AppComponents)();\n};\n\nAppComponents.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponents,\n  selectors: [[\"a\"]],\n  viewQuery: function AppComponents_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(MatTable, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.table = _t.first);\n    }\n  },\n  decls: 23,\n  vars: 3,\n  consts: [[\"appearance\", \"standard\"], [\"matInput\", \"\", \"placeholder\", \"Ingrese filtro\"], [\"input\", \"\"], [\"mat-raised-button\", \"\", 3, \"click\"], [\"mat-table\", \"\", 1, \"mat-elevation-z8\", \"demo-table\", 3, \"dataSource\"], [\"matColumnDef\", \"userId\"], [\"mat-header-cell\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 4, \"matCellDef\"], [\"matColumnDef\", \"id\"], [\"matColumnDef\", \"title\"], [\"matColumnDef\", \"completed\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\"], [\"class\", \"mat-row\", 4, \"matNoDataRow\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\"], [1, \"mat-row\"], [\"colspan\", \"4\", 1, \"mat-cell\"]],\n  template: function AppComponents_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-form-field\", 0)(1, \"mat-label\");\n      i0.ɵɵtext(2, \"Filter\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"input\", 1, 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function AppComponents_Template_button_click_5_listener() {\n        return ctx.elementData();\n      });\n      i0.ɵɵtext(6, \" Refresh \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"table\", 4);\n      i0.ɵɵelementContainerStart(8, 5);\n      i0.ɵɵtemplate(9, AppComponents_th_9_Template, 2, 0, \"th\", 6);\n      i0.ɵɵtemplate(10, AppComponents_td_10_Template, 2, 1, \"td\", 7);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(11, 8);\n      i0.ɵɵtemplate(12, AppComponents_th_12_Template, 2, 0, \"th\", 6);\n      i0.ɵɵtemplate(13, AppComponents_td_13_Template, 2, 1, \"td\", 7);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(14, 9);\n      i0.ɵɵtemplate(15, AppComponents_th_15_Template, 2, 0, \"th\", 6);\n      i0.ɵɵtemplate(16, AppComponents_td_16_Template, 2, 1, \"td\", 7);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(17, 10);\n      i0.ɵɵtemplate(18, AppComponents_th_18_Template, 2, 0, \"th\", 6);\n      i0.ɵɵtemplate(19, AppComponents_td_19_Template, 2, 1, \"td\", 7);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵtemplate(20, AppComponents_tr_20_Template, 1, 0, \"tr\", 11);\n      i0.ɵɵtemplate(21, AppComponents_tr_21_Template, 1, 0, \"tr\", 12);\n      i0.ɵɵtemplate(22, AppComponents_tr_22_Template, 3, 1, \"tr\", 13);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"dataSource\", ctx.dataSource);\n      i0.ɵɵadvance(13);\n      i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n    }\n  },\n  styles: [\".demo-table[_ngcontent-%COMP%] {\\n    width: 100%;\\n  }\\n  \\n  .demo-button-container[_ngcontent-%COMP%] {\\n    padding-bottom: 16px;\\n  }\\n  \\n  .demo-button[_ngcontent-%COMP%]    + .demo-button[_ngcontent-%COMP%] {\\n    margin-left: 8px;\\n  }\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksV0FBVztFQUNiOztFQUVBO0lBQ0Usb0JBQW9CO0VBQ3RCOztFQUVBO0lBQ0UsZ0JBQWdCO0VBQ2xCIiwiZmlsZSI6ImFwcC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmRlbW8tdGFibGUge1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG4gIFxuICAuZGVtby1idXR0b24tY29udGFpbmVyIHtcbiAgICBwYWRkaW5nLWJvdHRvbTogMTZweDtcbiAgfVxuICBcbiAgLmRlbW8tYnV0dG9uICsgLmRlbW8tYnV0dG9uIHtcbiAgICBtYXJnaW4tbGVmdDogOHB4O1xuICB9XG4gICJdfQ== */\"]\n});\nexport class AppComponent {\n  constructor(_httpClient) {\n    this._httpClient = _httpClient;\n    this.displayedColumns = ['created', 'state', 'number', 'title'];\n    this.data = [];\n    this.resultsLength = 0;\n    this.isLoadingResults = true;\n    this.isRateLimitReached = false;\n  }\n\n  ngAfterViewInit() {\n    this.exampleDatabase = new ExampleHttpDatabase(this._httpClient); // If the user changes the sort order, reset back to the first page.\n\n    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\n    merge(this.sort.sortChange, this.paginator.page).pipe(startWith({}), switchMap(() => {\n      this.isLoadingResults = true;\n      return this.exampleDatabase.getRepoIssues(this.sort.active, this.sort.direction, this.paginator.pageIndex).pipe(catchError(() => observableOf(null)));\n    }), map(data => {\n      // Flip flag to show that loading has finished.\n      this.isLoadingResults = false;\n      this.isRateLimitReached = data === null;\n\n      if (data === null) {\n        return [];\n      } // Only refresh the result length if there is new data. In case of rate\n      // limit errors, we do not want to reset the paginator to zero, as that\n      // would prevent users from re-triggering requests.\n\n\n      this.resultsLength = data.total_count;\n      return data.items;\n    })).subscribe(data => this.data = data);\n  }\n\n}\n\n__decorate([ViewChild(MatPaginator)], AppComponent.prototype, \"paginator\", void 0);\n\n__decorate([ViewChild(MatSort)], AppComponent.prototype, \"sort\", void 0);\n/** An example database that the data source uses to retrieve data for the table. */\n\n\nexport class ExampleHttpDatabase {\n  constructor(_httpClient) {\n    this._httpClient = _httpClient;\n  }\n\n  getRepoIssues(sort, order, page) {\n    const href = 'https://api.github.com/search/issues';\n    const requestUrl = `${href}?q=repo:angular/components&sort=${sort}&order=${order}&page=${page + 1}`;\n    return this._httpClient.get(requestUrl);\n  }\n\n}","map":{"version":3,"mappings":";;AAAA,SAAmBA,SAAnB,QAAmC,eAAnC;AACA,SAASC,QAAT,QAA4C,yBAA5C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;;ICOIC;IAAuCA;IAAKA;;;;;;IAC5CA;IAAwCA;IAAmBA;;;;;IAAnBA;IAAAA;;;;;;IAKxCA;IAAuCA;IAAQA;;;;;;IAC/CA;IAAwCA;IAAeA;;;;;IAAfA;IAAAA;;;;;;IAKxCA;IAAuCA;IAASA;;;;;;IAChDA;IAAwCA;IAAkBA;;;;;IAAlBA;IAAAA;;;;;;IAKxCA;IAAuCA;IAASA;;;;;;IAChDA;IAAwCA;IAAsBA;;;;;IAAtBA;IAAAA;;;;;;IAI1CA;;;;;;IACAA;;;;;;IAGAA,+BAAkC,CAAlC,EAAkC,IAAlC,EAAkC,EAAlC;IACmCA;IAA6CA;;;;;;;;IAA7CA;IAAAA;;;;ADxBrC,MAAMC,YAAY,GAAsB,CACtC;EACE,UAAU,CADZ;EAEE,MAAM,CAFR;EAGE,SAAS,oBAHX;EAIE,aAAa;AAJf,CADsC,CAAxC;AASA;;;;AAQA,OAAM,MAAOC,aAAP,CAAoB;EALzBC;IAMC,wBAA6B,CAAC,QAAD,EAAW,IAAX,EAAiB,OAAjB,EAA0B,WAA1B,CAA7B;IACA,kBAAa,CAAC,GAAGF,YAAJ,CAAb;EAgBD;;EAZOG,WAAW;IAAA;;IAAA;MACf,MAAM;QAAEC;MAAF,UAAiBN,KAAK,CAACO,GAAN,CAAU,4CAAV,CAAvB;MACAD,IAAI,CAACE,OAAL,CAAcC,CAAD,IAAuB;QAClC,KAAI,CAACC,UAAL,CAAgBC,IAAhB,CAAqBF,CAArB;MACD,CAFD;;MAGA,KAAI,CAACG,KAAL,CAAWC,UAAX;IALe;EAMhB;;AAZuB;;;mBAAbV;AAAa;;;QAAbA;EAAaW;EAAAC;IAAA;qBAIbhB,UAAQ;;;;;;;;;;;;;;MClCrBE,0CAAsC,CAAtC,EAAsC,WAAtC;MACaA;MAAMA;MACjBA;MACFA;MACAA;MAA0BA;QAAA,OAASe,iBAAT;MAAsB,CAAtB;MAAyBf;MAAQA;MAC3DA;MAGEA;MACEA;MACAA;MACFA;MAGAA;MACEA;MACAA;MACFA;MAGAA;MACEA;MACAA;MACFA;MAGAA;MACEA;MACAA;MACFA;MAGAA;MACAA;MAGAA;MAGFA;;;;MAlCiBA;MAAAA;MA2BKA;MAAAA;MACaA;MAAAA;;;;;ADkBnC,OAAM,MAAOgB,YAAP,CAAmB;EAYvBb,YAAoBc,WAApB,EAA2C;IAAvB;IAXpB,wBAA6B,CAAC,SAAD,EAAY,OAAZ,EAAqB,QAArB,EAA+B,OAA/B,CAA7B;IAEA,YAAsB,EAAtB;IAEA,qBAAgB,CAAhB;IACA,wBAAmB,IAAnB;IACA,0BAAqB,KAArB;EAK+C;;EAE/CC,eAAe;IACb,KAAKC,eAAL,GAAuB,IAAIC,mBAAJ,CAAwB,KAAKH,WAA7B,CAAvB,CADa,CAGb;;IACA,KAAKI,IAAL,CAAUC,UAAV,CAAqBC,SAArB,CAA+B,MAAO,KAAKC,SAAL,CAAeC,SAAf,GAA2B,CAAjE;IAEAC,KAAK,CAAC,KAAKL,IAAL,CAAUC,UAAX,EAAuB,KAAKE,SAAL,CAAeG,IAAtC,CAAL,CACGC,IADH,CAEIC,SAAS,CAAC,EAAD,CAFb,EAGIC,SAAS,CAAC,MAAK;MACb,KAAKC,gBAAL,GAAwB,IAAxB;MACA,OAAO,KAAKZ,eAAL,CAAsBa,aAAtB,CACL,KAAKX,IAAL,CAAUY,MADL,EAEL,KAAKZ,IAAL,CAAUa,SAFL,EAGL,KAAKV,SAAL,CAAeC,SAHV,EAILG,IAJK,CAIAO,UAAU,CAAC,MAAMC,YAAY,CAAC,IAAD,CAAnB,CAJV,CAAP;IAKD,CAPQ,CAHb,EAWIC,GAAG,CAAChC,IAAI,IAAG;MACT;MACA,KAAK0B,gBAAL,GAAwB,KAAxB;MACA,KAAKO,kBAAL,GAA0BjC,IAAI,KAAK,IAAnC;;MAEA,IAAIA,IAAI,KAAK,IAAb,EAAmB;QACjB,OAAO,EAAP;MACD,CAPQ,CAST;MACA;MACA;;;MACA,KAAKkC,aAAL,GAAqBlC,IAAI,CAACmC,WAA1B;MACA,OAAOnC,IAAI,CAACoC,KAAZ;IACD,CAdE,CAXP,EA2BGlB,SA3BH,CA2BalB,IAAI,IAAK,KAAKA,IAAL,GAAYA,IA3BlC;EA4BD;;AAhDsB;;AASEqC,YAAxB7C,SAAS,CAAC8C,YAAD,CAAe;;AACLD,YAAnB7C,SAAS,CAAC+C,OAAD,CAAU;AAqDtB;;;AACA,OAAM,MAAOxB,mBAAP,CAA0B;EAC9BjB,YAAoBc,WAApB,EAA2C;IAAvB;EAA2B;;EAE/Ce,aAAa,CAACX,IAAD,EAAewB,KAAf,EAAqClB,IAArC,EAAiD;IAC5D,MAAMmB,IAAI,GAAG,sCAAb;IACA,MAAMC,UAAU,GAAG,GAAGD,IAAI,mCAAmCzB,IAAI,UAAUwB,KAAK,SAC9ElB,IAAI,GAAG,CACT,EAFA;IAIA,OAAO,KAAKV,WAAL,CAAiBX,GAAjB,CAAgCyC,UAAhC,CAAP;EACD;;AAV6B","names":["ViewChild","MatTable","axios","i0","ELEMENT_DATA","AppComponents","constructor","elementData","data","get","forEach","e","dataSource","push","table","renderRows","selectors","viewQuery","ctx","AppComponent","_httpClient","ngAfterViewInit","exampleDatabase","ExampleHttpDatabase","sort","sortChange","subscribe","paginator","pageIndex","merge","page","pipe","startWith","switchMap","isLoadingResults","getRepoIssues","active","direction","catchError","observableOf","map","isRateLimitReached","resultsLength","total_count","items","__decorate","MatPaginator","MatSort","order","href","requestUrl"],"sourceRoot":"","sources":["/Users/henry.acuna/StudioProjects/opitech/prueba/src/app/app.component.ts","/Users/henry.acuna/StudioProjects/opitech/prueba/src/app/app.component.html"],"sourcesContent":["import {Component, ViewChild} from '@angular/core';\nimport { MatTable, MatTableDataSource} from '@angular/material/table';\nimport axios from 'axios';\n\nexport interface PeriodicElement {\n  userId: number;\n  id: number;\n  title: string\n  completed: boolean;\n}\n\n\n\nconst ELEMENT_DATA: PeriodicElement[] = [\n  {\n    \"userId\": 1,\n    \"id\": 1,\n    \"title\": \"delectus aut autem\",\n    \"completed\": false\n  }\n];\n\n/**\n * @title Adding and removing data when using an array-based datasource.\n */\n @Component({\n  selector: 'a',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponents {\n  displayedColumns: string[] = ['userId', 'id', 'title', 'completed'];\n  dataSource = [...ELEMENT_DATA];\n\n  @ViewChild(MatTable) table!: MatTable<PeriodicElement>;\n  \n  async elementData() {\n    const { data } = await axios.get('https://jsonplaceholder.typicode.com/todos');\n    data.forEach((e: PeriodicElement) => {\n      this.dataSource.push(e);\n    });\n    this.table.renderRows();\n  }\n\n  // applyFilter(event: Event) {\n  //   const filterValue = (event.target as HTMLInputElement).value;\n  //   this.table.filter = filterValue.trim().toLowerCase();\n  // }\n}\n\n\nexport class AppComponent implements AfterViewInit {\n  displayedColumns: string[] = ['created', 'state', 'number', 'title'];\n  exampleDatabase: ExampleHttpDatabase | null;\n  data: GithubIssue[] = [];\n\n  resultsLength = 0;\n  isLoadingResults = true;\n  isRateLimitReached = false;\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n\n  constructor(private _httpClient: HttpClient) {}\n\n  ngAfterViewInit() {\n    this.exampleDatabase = new ExampleHttpDatabase(this._httpClient);\n\n    // If the user changes the sort order, reset back to the first page.\n    this.sort.sortChange.subscribe(() => (this.paginator.pageIndex = 0));\n\n    merge(this.sort.sortChange, this.paginator.page)\n      .pipe(\n        startWith({}),\n        switchMap(() => {\n          this.isLoadingResults = true;\n          return this.exampleDatabase!.getRepoIssues(\n            this.sort.active,\n            this.sort.direction,\n            this.paginator.pageIndex,\n          ).pipe(catchError(() => observableOf(null)));\n        }),\n        map(data => {\n          // Flip flag to show that loading has finished.\n          this.isLoadingResults = false;\n          this.isRateLimitReached = data === null;\n\n          if (data === null) {\n            return [];\n          }\n\n          // Only refresh the result length if there is new data. In case of rate\n          // limit errors, we do not want to reset the paginator to zero, as that\n          // would prevent users from re-triggering requests.\n          this.resultsLength = data.total_count;\n          return data.items;\n        }),\n      )\n      .subscribe(data => (this.data = data));\n  }\n}\n\nexport interface GithubApi {\n  items: GithubIssue[];\n  total_count: number;\n}\n\nexport interface GithubIssue {\n  created_at: string;\n  number: string;\n  state: string;\n  title: string;\n}\n\n/** An example database that the data source uses to retrieve data for the table. */\nexport class ExampleHttpDatabase {\n  constructor(private _httpClient: HttpClient) {}\n\n  getRepoIssues(sort: string, order: SortDirection, page: number): Observable<GithubApi> {\n    const href = 'https://api.github.com/search/issues';\n    const requestUrl = `${href}?q=repo:angular/components&sort=${sort}&order=${order}&page=${\n      page + 1\n    }`;\n\n    return this._httpClient.get<GithubApi>(requestUrl);\n  }\n}","<mat-form-field appearance=\"standard\">\n  <mat-label>Filter</mat-label>\n  <input matInput placeholder=\"Ingrese filtro\" #input>\n</mat-form-field>\n<button mat-raised-button (click)=\"elementData()\"> Refresh </button>\n<table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8 demo-table\">\n\n  <!-- User Name Column -->\n  <ng-container matColumnDef=\"userId\">\n    <th mat-header-cell *matHeaderCellDef> User </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.userId}} </td>\n  </ng-container>\n\n  <!-- Subject Column -->\n  <ng-container matColumnDef=\"id\">\n    <th mat-header-cell *matHeaderCellDef> Subject </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\n  </ng-container>\n\n  <!-- Customers Column -->\n  <ng-container matColumnDef=\"title\">\n    <th mat-header-cell *matHeaderCellDef> Customer </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.title}} </td>\n  </ng-container>\n\n  <!-- Priority Column -->\n  <ng-container matColumnDef=\"completed\">\n    <th mat-header-cell *matHeaderCellDef> Priority </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.completed}} </td>\n  </ng-container>\n  \n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n  <!-- Row shown when there is no matching data. -->\n  <tr class=\"mat-row\" *matNoDataRow>\n    <td class=\"mat-cell\" colspan=\"4\">No data matching the filter \"{{input.value}}\"</td>\n  </tr>\n</table>\n"]},"metadata":{},"sourceType":"module"}